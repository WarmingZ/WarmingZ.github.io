I"~<p>I recently started studying databases, namely SQL. Based on this, I want to share with you the information I learned during my studies. I will continue to write about this topic, as it is impossible to describe everything in one post. I would also like to say in advance that I view databases from a programmer and how to use them for a programmer. This will not be a technical guide that will help you learn SQL, but I hope that I can interest people who know nothing about databases and perhaps show something new to people who work with them.</p>

<p><img src="/img/posts/Database/imageDatabase.webp" alt="Network" class="responsive" style="width: 100%; height: 350px;" /></p>

<hr />

<h3 id="a-little-theory">A little theory</h3>
<p>To begin with, as always, you need to understand the terminology. Unfortunately, no way without it. So, first of all, it is necessary to define what a database is? A database is a data that is organized according to certain rules and which can be managed following certain rules.</p>

<p>A common example of a database is the folder hierarchy on your hard drive. You usually organize these folders according to your own rules, such as photo folders that are neatly packaged by year in your operating system.</p>

<p>This example will help us understand what a DBMS is. After all, a database management system, we can imagine as your operating system, which contains folders with photos. A database management system (DBMS) is a software tool that allows you to create and use a database. Finally, it’s time to define SQL. It is a declarative language of structured queries, which is used to manage data in relational databases. SQL databases are built on a relational model, ie data can be stored in tables that are logically related to each other through common values, so there is no need for additional information to link them together. One of the most important features of SQL databases is that they are normalized. This means that there are at least two tables in each SQL database that should be combined if possible, as this reduces redundancy and simplifies data entry.</p>

<hr />

<h3 id="commands-to-interact-with-the-server">Commands to interact with the server</h3>
<p>So, to work with databases, I installed a docker with an SQL server. Instructions for installing and configuring this program can be found online. It will also not be difficult to find a test database, which you can download to your Docker server. If you downloaded Docker, but do not know how to start a container with a MySQL server, just enter the command in the terminal - <code class="language-plaintext highlighter-rouge">docker pull mysql</code>.  Then, to start the container with the image and parameters, write in the terminal - <code class="language-plaintext highlighter-rouge">docker run --name example-mysql -e MYSQL_ROOT_PASSWORD = pass -d mysql</code>. You can enter any name instead of “example”. In the future, to connect to our database you will need to enter the command - <code class="language-plaintext highlighter-rouge">docker exec -it example-mysql mysql -uroot -ppass</code>. <br />
Now here are some commands to interact with our server:</p>
<ol>
  <li>View databases on the server - (<code class="language-plaintext highlighter-rouge">show databases;</code>)</li>
  <li>Switch to the database - (<code class="language-plaintext highlighter-rouge">use nameDatabase;</code>)</li>
  <li>View tables in the database - (<code class="language-plaintext highlighter-rouge">show tables;</code>)</li>
  <li>View columns - (<code class="language-plaintext highlighter-rouge">describe Example;</code>)</li>
</ol>

<p>Next, if you find a test database on the Internet, to import a new dump, use the command - <code class="language-plaintext highlighter-rouge">docker exec -i example-mysql mysql -uroot -ppass &lt;example.sql</code>. In this case, example.sql is the file name of our dump. And we enter the same command to import data by changing the file name. Of course, you can find another way to install SQL Server without Docker. I’m just demonstrating how I installed the server SQL.</p>

<hr />

<h3 id="simple-select-query">Simple SELECT query</h3>
<p>It is also worth remembering that SQL is a declarative language, meaning that we do not give a command to the compiler or interpreter of the language, but we describe the desired result we want to get.</p>

<p>Of course, my first query to the database was the well-known Select. It looked something like this - <code class="language-plaintext highlighter-rouge">select * from table_name;</code>. I don’t know if I need to explain this query, but it may be interesting for someone who doesn’t know SQL at all. Select -means to select, and the asterisk “*” means that we get all the data entered in the table, well, respectively, “From” means from which table. We can also retrieve data from multiple columns by renaming them at once. It should be noted that these requests do not make any changes to the server. Entering such a command on the server - <code class="language-plaintext highlighter-rouge">SELECT name NewName, example as NewID FROM example;</code>. We will get about this result in the terminal.</p>

<p>+———-+——-+
|  NewName | NewID |
+———-+——-+
| Value 1  | 0     |
+———-+——-+
| Value 2  | 1     |
+———-+——-+</p>

<p>Having analyzed this query, you can understand the logic of almost all SQL queries. The query sounds something like this - select data from the name column (NewName in this case is not an explicit renaming of the column in the output), and the example column (where the keyword as means explicitly renaming the example column to NewID), from the example table.</p>
:ET